using DaggerSDKCodeGen.Models;
using System.Text;
using System.Text.Json;

namespace DaggerSDKCodeGen;

internal class CodeGen
{
    private static readonly JsonSerializerOptions _options = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        WriteIndented = true,
    };

    public static async Task RunAsync()
    {
        Directory.CreateDirectory("Generated");
        var content = await File.ReadAllTextAsync("introspect-parsed.json");
        var schema = JsonSerializer.Deserialize<IntrospectionResult>(content, _options)
            ?? throw new Exception("Failed to deserialize introspect-parsed.json");

        Console.WriteLine($"Read {schema.Types.Length} types");
        Console.WriteLine($"Read {schema.Directives.Length} directives");

        Console.WriteLine("Unique kinds:");
        foreach (var g in schema.Types.GroupBy(x => x.Kind).Distinct())
        {
            Console.WriteLine($"  - {g.Key} ({g.Count()})");
        }

        Console.WriteLine("Scalars:");
        foreach (var scalar in schema.Types.Where(x => x.Kind == "SCALAR"))
        {
            var result = GenerateScalar(scalar);
            await File.WriteAllTextAsync($"Generated/{scalar.Name}Type.cs", result);
            Console.WriteLine($"  - {scalar.Name} written");
        }
    }

    private static string GenerateScalar(QueryType scalar)
    {
        var result = new StringBuilder();
        object?[] nulls = [scalar.EnumValues, scalar.Fields, scalar.InputFields, scalar.Interfaces, scalar.PossibleTypes];

        if (nulls.Any(v => v != null))
        {
            throw new Exception($"Scalar {scalar.Name} has unexpected fields");
        }

        result.AppendLine("namespace DaggerSDKCodeGen.Generated;\n");
        result.AppendLine("// This file was generated by DaggerSDKCodeGen");
        result.AppendLine("// Do not edit this file directly");
        result.AppendLine($"// Description: {scalar.Description}");
        result.AppendLine($"public class {scalar.Name}Type");
        result.AppendLine("{");
        result.AppendLine("    public string Name => \"" + scalar.Name + "\";");
        result.AppendLine("}");
        return result.ToString();
    }
}
